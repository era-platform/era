\= penknife-compiled-src.pk (part of Era)
\= Copyright 2013, 2014 Ross Angle. Released under the MIT License.



\= == Prelude ========================================================

(defval qname.list /fn x x)

(defmacro qname.let /fn args
/let-list (op-fork body get-fork gensym-base) args
/let-list (var val body) body
/macroexpand-to-fork
  (list qname.let-list list.var (list qname.list val) body)
  get-fork
  gensym-base)

(defval qname.err-fn /fn args
/let-list (msg) args
/let-list (str)
    (list/if
        (qualified-name-eq
          qname.string (nl-get-tag-name linear-as-nonlinear.msg))
      msg
      quote.\;qq[Called err-fn with a message that wasn't a string])
  raise.str)

(defmacro qname.err /fn args
/let-list (op-fork body get-fork gensym-base) args
/let-list (msg) body
/macroexpand-to-fork
  (list qname.err-fn /list qname.quote msg)
  get-fork
  gensym-base)

(defmacro qname.fn-with-args /fn args
/let-list (op-fork body get-fork gensym-base) args
/let-list (arglist body) body
/let g-args (pair-name gensym-base uqname.args)
/macroexpand-to-fork
  (list qname.fn g-args (list qname.let-list arglist g-args body))
  get-fork
  (pair-name gensym-base uqname.body-of-fn-with-args))

(defval qname.fix
/let fix
    (fn-with-args (fix func)
      (fn args (call func (cons (fix fix func) args))))
/fn-with-args (func)
  (fix fix func))

(defval qname.not /fn-with-args (x)
/if x (nil) (yep/nil))

(defval qname.nl-isa /fn-with-args (tag-name nl)
/if (not is-a-qualified-name.tag-name)
  err.\;qq[Called nl-isa with a tag name that wasn't a qualified name]
  (qualified-name-eq tag-name nl-get-tag-name.nl))

(defval qname.nl-is-a-struct-with-tag /fn-with-args (tag-name nl)
/if (not is-a-qualified-name.tag-name)
  err.\;qq[
    Called nl-is-a-struct-with-tag with a tag name that wasn't a
    qualified name]
/if (not/nl-is-a-struct nl)
  (nil)
  (nl-isa tag-name nl))

\= TODO: We have another definition of `len` below that's much
\= shorter. See if we should replace it with this method-based
\= version.
\=
\= (defmethod qname.len /list uqname.collection)
\= (set-impl qname.len qname.nil /fn-with-args (collection)
\=   (nil))
\= (set-impl qname.len qname.cons /fn-with-args (collection)
\= /let-list (first rest) struct-get-args.collection
\=   (succ len.rest))

(defmacro qname.if-struct
/fn-with-args (op-fork body get-fork gensym-base)
/let-list (tag-name args x then else) body
/let g-x (pair-name gensym-base uqname.x)
/let g-nl-x (pair-name gensym-base uqname.nl-x)
/let g-ignored (pair-name gensym-base uqname.ignored)
/macroexpand-to-fork
  (list qname.let g-nl-x (list qname.linear-as-nonlinear x)
  /list qname.let g-x (list qname.nl-get-linear g-nl-x)
  /list qname.if
      (list qname.nl-is-a-struct-with-tag
        (list qname.qname tag-name)
        g-nl-x)
    (list qname.let-list args (list qname.struct-get-args g-x)
      then)
    \= Let `g-x` be dropped.
    else)
  get-fork
  (pair-name gensym-base uqname.body-of-if-struct))

(defval qname.fold-nat /fix/fn-with-args (foldl-nat init nat func)
/if-struct succ (pred) nat
  (foldl-nat func.init pred func)
/if-struct nil () nat
  init
  err.\;qq[Called fold-nat with a non-nat number])

(defval qname.is-a-list /fn-with-args (x)
/if-struct cons (first rest) x
  (yep/nil)
/if-struct nil () x
  (yep/nil)
  (nil))

(defval qname.is-a-nat /fn-with-args (x)
/if-struct succ (pred) x
  (yep/nil)
/if-struct nil () x
  (yep/nil)
  (nil))

(defval qname.foldl /fix/fn-with-args (foldl init lst func)
/if-struct cons (first rest) lst
  (foldl (func init first) rest func)
/if-struct nil () lst
  init
  err.\;qq[Called foldl with a non-list list])

(defval qname.rev-append /fn-with-args (lst rev-lst)
  (foldl rev-lst lst /fn-with-args (rev-lst elem)
    (cons elem rev-lst)))

(defval qname.rev /fn-with-args (lst)
  (rev-append lst (nil)))

(defval qname.mappend /fn-with-args (lst func)
  (rev/foldl (nil) lst /fn-with-args (rev-result elem)
    (rev-append func.elem rev-result)))

(defval qname.map /fn-with-args (lst func)
  (mappend lst /fn-with-args (elem)
    (list func.elem)))

(defval qname.len /fn-with-args (lst)
  (foldl (nil) lst /fn-with-args (len elem)
    succ.len))

(defval qname.nat-eq /fix/fn-with-args (nat-eq a b)
/if-struct succ (pred-a) a
  (if-struct succ (pred-b) b
    (nat-eq pred-a pred-b)
  /if-struct nil () b
    (nil)
    err.\;qq[Called nat-eq with a non-nat second argument])
/if-struct nil () a
  (if-struct succ (b-pred) b
    (nil)
  /if-struct nil () b
    (yep/nil)
    err.\;qq[Called nat-eq with a non-nat second argument])
  err.\;qq[Called nat-eq with a non-nat first argument])

\= NOTE: Back when we used debuggableSyncYoke, this definition caused
\= a JavaScript stack overflow error. Now the above code might cause
\= it instead because it uses more layers of macros.
(defval qname.take /fix/fn-with-args (take num lst)
/if-struct succ (pred) num
  (if-struct cons (first rest) lst
    (let-list (heads tail) (take pred rest)
      (list (cons first heads) tail))
  /if-struct nil () lst
    err.\;qq[
      Called take with a number greater than the length of the list]
    err.\;qq[Called take with a non-list list])
/if-struct nil () num
  (if-struct cons (first rest) lst
    (list (nil) lst)
  /if-struct nil () lst
    (list (nil) lst)
    err.\;qq[Called take with a non-list list])
  err.\;qq[Called take with a non-nat number])

(defmacro qname.defmacro-codegen
/fn-with-args (op-fork body get-fork gensym-base)
/let-list (name body-var gensym-names codegen-body) body
/let gbase (pair-name gensym-base uqname.defmacro-codegen)
/let gbase-gensyms (pair-name gbase uqname.gensyms)
/let g-op-fork (pair-name gbase-gensyms uqname.g-op-fork)
/let g-get-fork (pair-name gbase-gensyms uqname.g-get-fork)
/let g-gensym-base (pair-name gbase-gensyms uqname.g-gensym-base)
/let g-gbase (pair-name gbase-gensyms uqname.g-gbase)
/let g-gbase-gensyms (pair-name gbase-gensyms uqname.g-gbase-gensyms)
/macroexpand-to-fork
  (list qname.defmacro (list qname.qname name)
  /list qname.fn-with-args
    (list g-op-fork body-var g-get-fork g-gensym-base)
  /list qname.let g-gbase
    (list qname.pair-name g-gensym-base (list qname.uqname name))
  /list qname.let g-gbase-gensyms
    (list qname.pair-name g-gbase (list qname.uqname quote.gensyms))
  /list qname.let-list gensym-names
    (cons qname.list /map gensym-names /fn-with-args (gensym-name)
      (list qname.pair-name g-gbase-gensyms
        (list qname.uqname gensym-name)))
  /list qname.macroexpand-to-fork
    codegen-body
    g-get-fork
    (list qname.pair-name g-gbase
      (list qname.uqname quote.macroexpansion)))
  get-fork
  (pair-name gbase uqname.macroexpansion))

(defmacro-codegen let-list-and-rest body (g-heads g-tail)
/let-list (head-vars tail-var lst body) body
  \= NOTE: We're inserting a natural number (a non-list, non-name
  \= value) into code, but that's just fine. The compiler can process
  \= simple data structures like this one.
  (list qname.let-list (list g-heads g-tail)
      (list qname.take (list qname.quote len.head-vars) lst)
  /list qname.let-list head-vars g-heads
  /list qname.let tail-var g-tail
    body))

(defmacro-codegen fn-with-varargs body (g-args)
/let-list (arglist rest body) body
  (list qname.fn g-args
  /list qname.let-list-and-rest arglist rest g-args
    body))

(defval qname.append /fn-with-varargs () lsts
  (mappend lsts /fn-with-args (lst)
    lst))

(defval qname.is-a-string /fn-with-args (x)
  (nl-isa qname.string linear-as-nonlinear.x))

(defval qname.string-eq /fn-with-args (a b)
  (unqualified-name-eq string-name.a string-name.b))

\= TODO: See if this should just be internal to the definition of
\= `qq`.
(defval qname.expand-qq
/fix/fn-with-args
  (expand-qq qq-str uq-str uqs-str return-list level x)
/let recur
  (fn-with-args (return-list level x)
    (expand-qq qq-str uq-str uqs-str return-list level x))
/let as-list
  (fn-with-args (expr)
    (if return-list (list qname.list expr) expr))
/let parse-escape
  (fn-with-args (str)
    (if-struct cons (first rest) x
      (if (nat-eq len.x (succ/succ/nil))
        (let-list (first second) x
        /if is-a-string.first
          (if (string-eq first str)
            yep.second
            (nil))
          (nil))
        (nil))
      (nil)))
\= TODO: Remove some of the duplicate branches from the following
\= code.
/if-struct nil () level
  (if-struct yep (x) parse-escape.qq-str
    (as-list/list qname.list (list qname.quote qq-str)
      (recur (nil) succ.level x))
  /if-struct yep (x) parse-escape.uq-str
    as-list.x
  /if-struct yep (x) parse-escape.uqs-str
    (if return-list
      x
      err.\;qq[
        Called qq with a tree containing uqs in an incorrect place])
  /if is-a-list.x
    (as-list/cons qname.append /map x /fn-with-args (elem)
      (recur (yep/nil) level elem))
    (as-list/list qname.qname x))
/if-struct succ (pred-level) level
  (if-struct yep (x) parse-escape.qq-str
    (as-list/list qname.list (list qname.quote qq-str)
      (recur (nil) succ.level x))
  /if-struct yep (x) parse-escape.uq-str
    (as-list/list qname.list (list qname.quote uq-str)
      (recur (nil) pred-level x))
  /if-struct yep (x) parse-escape.uqs-str
    (as-list/list qname.list (list qname.quote uqs-str)
      (recur (nil) pred-level x))
  /if is-a-list.x
    (as-list/cons qname.append /map x /fn-with-args (elem)
      (recur (yep/nil) level elem))
    (as-list/list qname.qname x))
  err.\;qq[Called expand-qq with a non-nat level])

(defmacro-codegen qq body ()
/let-list (tree) body
  (expand-qq quote.qq quote.uq quote.uqs (nil) (nil) tree))

\= TODO: See if this should just be internal to the definition of
\= `qq2`.
(defval qname.expand-qq2
/fix/fn-with-args
  ( expand-qq2 esc-str escesc-str startesc-str stopesc-str elem-str
    splice-str return-list level x)
/let recur
  (fn-with-args (return-list level x)
    (expand-qq2 esc-str escesc-str startesc-str stopesc-str elem-str
      splice-str return-list level x))
/let as-list
  (fn-with-args (expr)
    (if return-list (list qname.list expr) expr))
/let parse-singleton
  (fn-with-args (x)
    (if-struct cons (first rest) x
      (if-struct nil () rest
        yep.first
        (nil))
      (nil)))
/let parse-tag-rest
  (fn-with-args (str x)
    (if-struct cons (first rest) x
      (if is-a-string.first
        (if (string-eq first str)
          yep.rest
          (nil))
        (nil))
      (nil)))
/let parse-tag-pair
  (fn-with-args (str x)
    (if-struct yep (rest) (parse-tag-rest str x)
      parse-singleton.rest
      (nil)))
/let parse-uplevels
  (fix/fn-with-args (parse-uplevels level levels-passed x)
    (if-struct succ (pred-level) level
      (if-struct yep (contents) parse-singleton.x
        (parse-uplevels pred-level succ.levels-passed contents)
      /if-struct yep (contents) (parse-tag-pair stopesc-str x)
        (nope/list pred-level levels-passed contents)
        (nil))
      yep.x))
/let build-uplevels
  (fix/fn-with-args (build-uplevels level x)
    (if-struct succ (pred-level) level
      (list qname.list (build-uplevels pred-level x))
      x))
/if (not is-a-nat.level)
  err.\;qq[Called expand-qq2 with a non-nat level]
/if-struct yep (-) (parse-tag-rest esc-str x)
  (if-struct yep (x) (parse-tag-pair esc-str x)
    (if-struct yep (x) (parse-tag-pair startesc-str x)
      (as-list/list qname.list (list qname.quote esc-str)
      /list qname.list (list qname.quote startesc-str)
        (recur (nil) succ.level x))
    /let parsed-uplevels (parse-uplevels level (nil) x)
    /if-struct yep (x) parsed-uplevels
      (if-struct yep (rest) (parse-tag-rest escesc-str x)
        (let x (cons startesc-str rest)
          (as-list/cons qname.append /map x /fn-with-args (elem)
            (recur (yep/nil) level elem)))
      /if-struct yep (x) (parse-tag-pair stopesc-str x)
        (if-struct yep (x) (parse-tag-pair elem-str x)
          as-list.x
        /if-struct yep (x) (parse-tag-pair splice-str x)
          (if return-list
            x
            err.\;qq[Called qq2 with a splice in an incorrect place])
          err.\;qq[
            Called qq2 with an unrecognized interpolation type])
        err.\;qq[Called qq2 with an unrecognized escape sequence])
    
    \= Also parse unquotes of depth less than the current depth, and
    \= subtract their depth during their interior.
    /as-list/if-struct nope (x) parsed-uplevels
      (let-list (levels-left levels-passed x) x
        (list qname.list (list qname.quote esc-str)
          (build-uplevels levels-passed
            (list qname.list (list qname.quote stopesc-str)
              (recur (nil) levels-left x)))))
      (list qname.cons (list qname.quote esc-str)
        (recur (yep/nil) level x)))
    
    err.\;qq[Called qq22 with an unrecognized escape sequence])
/as-list/if-struct istring-cons (prefix interpolation rest) x
  (list qname.istring-cons
    (list qname.quote prefix)
    (recur (nil) level interpolation)
    (recur (nil) level rest))
/if is-a-list.x
  (cons qname.append /map x /fn-with-args (elem)
    (recur (yep/nil) level elem))
  \= NOTE: On the first level, we resolve atoms as names and insert
  \= the qualified names. On deeper levels, we insert them as they
  \= were originally (usually strings).
  (list (if level qname.quote qname.qname) x))

(defmacro-codegen qq2 body ()
/let-list (tree) body
/let parse-singleton
  (fn-with-args (x)
    (if-struct cons (first rest) x
      (if-struct nil () rest
        yep.first
        (nil))
      (nil)))
/let parse-tag-rest
  (fn-with-args (str x)
    (if-struct cons (first rest) x
      (if is-a-string.first
        (if (string-eq first str)
          yep.rest
          (nil))
        (nil))
      (nil)))
/let parse-tag-pair
  (fn-with-args (str x)
    (if-struct yep (rest) (parse-tag-rest str x)
      parse-singleton.rest
      (nil)))
/let startesc-str quote.t
/if-struct yep (tree) (parse-tag-pair startesc-str tree)
  (expand-qq2 quote.qq2 quote.- startesc-str quote.x quote.x quote.s
    (nil)
    (nil)
    tree)
  err.\;qq[Called qq2 without the right opening escape sequence])

(defval qname.call-with-local-linearity /fn-with-args (body)
/call-with-mbox-env/fn-with-args (mbox-env)
/let mget (fn-with-args (mbox) (mbox-get mbox-env mbox))
/let mset (fn-with-args (mbox val) (mbox-set mbox-env mbox val))
/let num-strays-mbox (mbox-new mbox-env (succ/nil))
/let result
  (body
    (fn-with-args (local-inner-val local-duplicator local-unwrapper)
    /nonlinear-as-linear
      (list (mbox-new mbox-env (nil)) local-inner-val)
      
      \= duplicator
      (fn-with-args (inner-val num-dups)
      /let-list (used-mbox local-inner-val) inner-val
      /if mget.used-mbox
        err.\;qq[
          Can't duplicate a local linear value that was already used]
      /let - (mset used-mbox (yep/nil))
      /let - (if-struct succ (pred) mget.num-strays-mbox
               (mset num-strays-mbox pred)
               err.\;qq[
                 Internal error when duplicating a local linear value
                 ])
        (map (local-duplicator local-inner-val num-dups)
        /fn-with-args (local-inner-val)
          (let - (mset num-strays-mbox (succ mget.num-strays-mbox))
            (list (mbox-new mbox-env (nil)) local-inner-val))))
      
      \= unwrapper
      (fn-with-args (inner-val)
      /let-list (used-mbox local-inner-val) inner-val
        local-unwrapper.local-inner-val)))
/if-struct succ (pred) mget.num-strays-mbox
  err.\;qq[
    Didn't consume all local linear values in a call to
    call-with-local-linearity]
  result)



\= == Examples =======================================================

(nil)
(yep (nil))
(cons (nil) (nil))
((fn x (cons x x)) (nil) (nil))
((fn x ((fn x (cons x x)) x x)) (nil) (nil))

(list quote.a quote.b)

(defval qname.curried-example /fn x /fn y (cons y x))
((curried-example (nil)) (yep/nil))

(let-list (a b) (list quote.foo quote.bar) a)
(let-list (a b) (list quote.foo quote.bar) (list a a b b a))

(if (nil) quote.foo quote.bar)
(if (yep/nil) quote.foo quote.bar)
(let-list (a b) (list quote.foo quote.bar)
  (if (nil)
    (list a a b)
    (list b b a)))
( (fn args
    (let-list (a) args
      a))
  (nil))

( (fn-with-args (a b c)
    (list b b c))
  quote.foo quote.bar quote.baz)

(call-with-mbox-env/fn-with-args (mbox-env)
/let my-mbox (mbox-new mbox-env (succ/nil))
/let a (mbox-get mbox-env my-mbox)
/let - (mbox-set mbox-env my-mbox succ.a)
/let b (mbox-get mbox-env my-mbox)
/let - (mbox-set mbox-env my-mbox succ.b)
/let c (mbox-get mbox-env my-mbox)
/list a b c)

(rev-append (list quote.a quote.b quote.c) (list))

(if-struct cons (first rest) (list quote.foo quote.bar quote.baz)
  (list first rest)
  (nil))

(take (succ/succ/nil) quote.(a b c))

( (fn-with-varargs (a b c) rest
    (list a b c rest))
  quote.a quote.b quote.c quote.d quote.e)

(map (list (nil) (succ/nil) (succ/succ/nil)) succ)

\= NOTE: These tests work, but they take a little too much time to
\= execute.
\= TODO: Speed 'em up.
qq.(foo bar)
qq.(foo uq.(succ/succ/nil))
qq.(foo uq.(succ/succ/nil) (uqs quote.(a b c)))
qq.(foo (uq.(succ/succ/nil) (uqs quote.(a b c)) bar))
qq.(foo ((qq uq.(succ/succ/nil)) (qq (uqs quote.(a b c))) bar))
qq.(foo ((qq (uq uq.(succ/succ/nil))) (qq (uqs quote.(a b c))) bar))
(qq2/t/foo bar)
(qq2/t/foo (qq2/x/x/succ/succ/nil))
(qq2/t/foo (qq2/x/x/succ/succ/nil) (qq2/x/s quote.(a b c)))
(qq2/t/foo ((qq2/x/x/succ/succ/nil) (qq2/x/s quote.(a b c)) bar))
(qq2/t/foo ((qq2/t (qq2/x/x/succ/succ/nil)) (qq2/t (qq2/x/s quote.(a b c))) bar))
(qq2/t/foo ((qq2/t (qq2/x/x (qq2/x/x/succ/succ/nil))) (qq2/t (qq2/x/s quote.(a b c))) bar))
(qq2/t/foo ((qq2/t (qq2//x/x/succ/succ/nil)) (qq2/t (qq2/x/s quote.(a b c))) bar))

\= Test that we we don't let local names hijack the qualified names
\= used by macro-generated code.
(let append list qq.(a b c))
(let append list (qq2/t/a b c))

(defval qname.call-with-flow-grapher /fn-with-args (body)
/call-with-mbox-env/fn-with-args (mbox-env)
/call-with-local-linearity/fn-with-args (local-nonlinear-as-linear)
/let mget (fn-with-args (mbox) (mbox-get mbox-env mbox))
/let mset (fn-with-args (mbox val) (mbox-set mbox-env mbox val))
/let rev-junctions-mbox (mbox-new mbox-env (nil))
/let next-node-num-mbox (mbox-new mbox-env (nil))
/let get-next-node-num
  (fn-with-args ()
  /let result mget.next-node-num-mbox
  /let - (mset next-node-num-mbox (succ mget.next-node-num-mbox))
    result)
/let -
  (body/local-nonlinear-as-linear
    (get-next-node-num)
    
    \= Duplicating this value causes it to record a junction in the
    \= graph.
    (fn-with-args (inner-val num-dups)
    /let result
      (rev/fold-nat (nil) num-dups /fn-with-args (rev-result)
        (cons (get-next-node-num) rev-result))
    /let - (mset rev-junctions-mbox
             (cons (list inner-val result) mget.rev-junctions-mbox))
      result)
    
    \= Unwrapping this value is useless.
    (fn-with-args (inner-val)
      (nil)))
  (rev mget.rev-junctions-mbox))

\= Build a flow graph for some example code.
(call-with-flow-grapher/fn-with-args (n)
/let m (list n n)
  (list m m m))
