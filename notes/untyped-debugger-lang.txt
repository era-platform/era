Various parts of the language, including function calls, lambda
syntaxes, and control flow constructs take an additional argument,
which is a hint for the debugger. This hint can specify information
for entries in a log file, for frames in a stack trace, for levels of
verbosity in a stack trace, and for other purposes:

- Arbitrary information for application-specific debugging support.
  - NOTE: It would seem useful but challenging for this information
    to refer to state resources that are considered external to the
    program (i.e. outliving the program).
- Acceptable criteria for an alternate way to resume the program (e.g.
  a type and unit test suite for any debugger-inserted function
  result).
- Inhibitors for tail call elimination.
- Hints about whether the program may be experiencing a non-"stuck"
  error (e.g. using more stack frames or allocations than
  anticipated).

In "<expr [] lin1 lin2 L1 L2 ; nl1 nl2 NL1 NL2>", the capitalized
tokens represent sets of variables. The variables that come before the
semicolon are linear (usable exactly once), while the rest are
nonlinear (usable zero, one, or more times).

The brackets "[]" contain a sequence of continuation types, and
sometimes they contain the capitalized variable "W" representing an
arbitrary subsequence. The types are `*`, `hint`, and `hinted`.

<expr [*] ; NL> ::= (done)
<expr [hint] ; NL> ::= (no-hint)
<expr [hint] L ; NL> ::= (hint <expr [] L ; NL>)
<expr [hinted W] L ; NL> ::=
  (hinted <expr [hint] ; NL> <expr [W] L ; NL>)
<expr [] var ; NL> ::= (get var)
<expr [] ; var NL> ::= (get var)
<expr [W] L1 L2 ; NL> ::=
  (let <expr [hint] ; NL (error description)> x <expr [] L1 ; NL>
    <expr [W] L2 ; x NL>)
  -- May result in an error if `x` is used nonlinearly and would be
  -- bound to a linear value.
<expr [W] L1 L2 ; NL> ::= (do <expr [*] L1 ; NL> <expr [W] L2 ; NL>)
<expr [W] L ; NL> ::=
  (enter-contour $contour
    <expr [hinted hinted W] L ; $contour NL
      (body with entry and exit hints)>)
  -- NOTE: Variables named `$contour` in this grammar are only for use
  -- with (leave-contour ...). The code between the introduction and
  -- use of `$contour` is considered to be "lexical internals." For
  -- any given entrance into this boundary at run time, as the program
  -- dynamically enters and exits the lexical internals, the time it
  -- spends inside that lexical boundary is considered "dynamic
  -- internals."
  --
  -- Not all function authors will have the discipline to remember to
  -- put (leave-contour ...) in their higher-order functions, but
  -- those who do will make it easier for clients to see their
  -- higher-order client calls over the noise of the internal
  -- abstraction layers. Fortunately, if a function hogs the stack
  -- trace, a user can write a function that delegates to it inside
  -- the appropriate (leave-contour ...) boundary.
<expr [W] L ; $contour NL> ::=
  (leave-contour $contour
    <expr [hinted hinted W] L ; NL (body with entry and exit hints)>)
<expr [] L ; NL> ::=
  (fn <expr [hint] ; NL (hint for memory inspector)>
    $contour args
    <expr [hinted hinted] L ; $contour args NL
      (body with entry and exit hints)>)
  -- Results in a linear value if `L` is nonempty.
<expr [] L1 L2 ; NL> ::=
  (call <expr [hint] ; NL (error description)>
    <expr [] L1 ; NL (function)> <expr [] L2 ; NL (args)>)
  -- May result in an error if a non-(fn ...) is called. May also
  -- result in an error if the function's `args` is used nonlinearly
  -- and would be bound to a linear value.
<expr [] L1 L2 ; NL> ::=
  (coroutine <expr [hint] ; NL (hint for memory inspector)>
    parent-coroutine first-coroutine-input
    <expr [*] parent-coroutine L1 ; first-coroutine-input NL>
    finally-result
    <expr [*] L2 ; finally-result NL>)
  -- Returns a linear value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield <expr [hint] ; NL (yield emigration hint)>
    <expr [] L1 ; NL (coroutine before)>
    <expr [] L2 ; NL (coroutine input)>
    coroutine-after result
    <expr [hinted W] coroutine-after L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine isn't a coroutine, isn't
  -- waiting for input, or doesn't call (yield ...) in response. May
  -- also result in an error if `result` or the coroutine's own input
  -- variable is used nonlinearly and would be bound to a linear
  -- value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield-request-drop <expr [hint] ; NL (yield emigration hint)>
    result
    <expr [] L1 ; NL (coroutine)>
    <expr [] L2 ; NL (coroutine input)>
    <expr [hinted W] L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine isn't a coroutine, isn't
  -- waiting for input, or doesn't call (yield-and-drop ...) in
  -- response. May also result in an error if `result` or the
  -- coroutine's own input variable is used nonlinearly and would be
  -- bound to a linear value.
<expr [*] L1 L2 ; NL> ::=
  (yield-and-drop <expr [hint] ; NL (coroutine exit hint)>
    <expr [] L1 ; NL (parent coroutine)>
    <expr [] L2 ; NL (parent coroutine finally input)>
    <expr [] L2 ; NL (parent coroutine client input)>)
  -- Passes one value to the `finally-result-1` or `finally-result-2`
  -- variable of (yield-and-split ...) or the `finally-result`
  -- variable of (coroutine ...), and passes another value to the
  -- `result` variable of (yield-request-drop ...).
  --
  -- May result in an error if the parent coroutine isn't the right
  -- coroutine or if it isn't waiting on a (yield-request-drop ...).
  -- May also result in an error if either of the input variables is
  -- used nonlinearly and would be bound to a linear value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield-request-split <expr [hint] ; NL (yield emigration hint)>
    coroutine-after-1 coroutine-after-2 result
    <expr [] L1 ; NL (coroutine)>
    <expr [] L2 ; NL (coroutine input)>
    <expr [hinted W]
      coroutine-after-1 coroutine-after-2 L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine isn't a coroutine, isn't
  -- waiting for input, or doesn't call (yield-and-split ...) in
  -- response. May also result in an error if `result` or the
  -- coroutine's own input variable is used nonlinearly and would be
  -- bound to a linear value.
<expr [W] L1 L2 L3 L4 L5 ; NL> ::=
  (yield-and-split <expr [hint] ; NL (coroutine exit hint)>
    <expr [] L1 ; NL (parent coroutine)>
    <expr [] L2 ; NL (parent coroutine input)>
    parent-coroutine-1 branch-input-1
    <expr [hinted *] parent-coroutine-1 L3 ; branch-input-1 NL
      (branch with yield immigration hint)>
    parent-coroutine-2 branch-input-2
    <expr [hinted *] parent-coroutine-2 L4 ; branch-input-2 NL
      (branch with yield immigration hint)>
    needs-finally finally-result-1 finally-result-2
    <expr [hinted W]
      L5 ; needs-finally finally-result-1 finally-result-2 NL
      (afterward with yield immigration hint)>)
  -- Sends two new coroutine handles instead of one, and eventually
  -- synchronizes into a single computation again. The values of
  -- `finally-result-1` and `finally-result-2` are the finally inputs
  -- that came from (yield-and-drop ...) for `parent-coroutine-1` and
  -- `parent-coroutine-2`. The value of `needs-finally` must be
  -- satisfied by (satisfy-finally ...), and when it is, that value
  -- will be the finally input of the original parent coroutine.
  --
  -- May result in an error if the parent coroutine isn't the right
  -- coroutine or if it isn't waiting on a (yield-request-split ...).
  -- May also result in an error if `branch-input-1`,
  -- `branch-input-2`, `branch-result-1`, `branch-result-2`, or the
  -- coroutine's own input variable is used nonlinearly and would be
  -- bound to a linear value.
<expr [*] L1 L2 ; NL> ::=
  (satisfy-finally
    <expr [] L1 ; NL (a `needs-finally` value)>
    <expr [] L2 ; NL (finally input)>)
  -- May result in an error if the `needs-finally` value isn't a
  -- `needs-finally` value.


Notice that the expression (coroutine ...) can be used in a completely
nonlinear context, but still introduces linear variables. Because of
this, linear variables still make a showing in the language even if no
linear variables are used in the program's top level or I/O.

Notice that in this language, the nesting of CPS-style abstractions
can be visualized a lot like non-CPS nested function calls thanks to
(leave-contour ...). And thanks to coroutines, certain implementations
of language interpreters written in this language can inherit this
language's debugger support without hogging the main stack!

---

Let's do this again in a concatenative style, ripping off big parts of
the Awelon instruction set ABC.

https://github.com/dmbarbour/awelon/blob/master/ABC.md

(The operators listed here are remixed in ways that probably aren't
pragmatic for a bytecode, but they should still be a sufficient
basis.)

While we're at it, let's generalize to multiple stages (like Awelon
will generalize to multiple partitions), and let's keep being explicit
about what happens in an error case.

(TODO: Add debugger hints to this. Not only would that be informed by
the above lisp-style system; it might also be relevant as a feature of
user-defined stages. When adding debugger hints, think of it like
this: Sequential code is code that carries a single linear value
throughout. Roughly, causally commutative code is code that carries
branching linear values and eventually spends them all. Either way,
stack frames are like splitting linear values into two, hiding one of
each pair (representing the stack up to this point), and recombining
them later. Unfortunately, implementing it that way would require a
search of the heap upon exit, in order to find the linear values to
rejoin the "stack" with.)

A stage is a part of the code that is supposed to execute at a certain
time and place. The code is always running in a certain stage, and it
may also be recording things to do in later stages. The variables `s`,
`s1`, `s2`, etc. refer to sets of stages. The values processed by the
below operators are tagged according to which stages they actually
exist as values in. Except for the main stage, all these stage-tagged
values actually record what operators they go through, so that these
operators can be transported or stored for that stage's actual
execution.

Every operator can be recorded this way, even the operators for
creating new stages. Hence, the stage variable `s` can represent a
whole tree of stages at once: It can explicitly refer to the current
stage being executed, it can explicitly refer to any direct descendant
of that stage (i.e. a stage currently being recorded), and whatever it
explicitly refers to, it implicitly spans all the indirect descendants
of that stage.

Just because a stage can observe a value doesn't mean all its
descendant stages can, and of course its ancestors can't necessarily
observe it either.

<word> ::= <function-name>
<word> ::= ' <function-name>
  -- Transforms the function from signature (A ->? B) to
  -- (c ->? ((A -> B){s} * c)), where `s` is the current stage.

<dynamic-type-pattern> ::= _  -- don't care
<dynamic-type-pattern> ::= <var>
<dynamic-type-pattern> ::= (<var> : <dynamic-type-pattern>)
  -- This just accomplishes the ability to refer to this value
  -- elsewhere in the pattern.
<dynamic-type-pattern> ::= Zero  -- shorthand for Placeholder{Zero}
<dynamic-type-pattern> ::=
  <dynamic-type-pattern> * <dynamic-type-pattern>
<dynamic-type-pattern> ::=
  <dynamic-type-pattern> + <dynamic-type-pattern>
<dynamic-type-pattern> ::= <dynamic-constructor> { <stages> }
  -- This represents a value that is observable in *exactly* the given
  -- stages.
<stages> ::= <var>
  -- This syntax is ambiguous with the syntax for a single <stage>,
  -- but this one takes precedence.
<stages> ::= <stage>,*
  -- Note that this repetition is set-like.
<stages> ::= Zero
  -- This indicates that the value is available in *all* stages.
<stage> ::= <var>
<stage> ::= Current
  -- This is the stage executing right now.
<dynamic-constructor> ::= _  -- don't care
  -- This imposes no requirement on the dynamic type constructor
  -- itself, but the stages can still be checked.
<dynamic-constructor> ::= Placeholder
  -- This represents a value that's mostly featureless in the current
  -- stage and condition, but which might have a more detailed type in
  -- some other stage or condition.
<dynamic-constructor> ::= Atom
<dynamic-constructor> ::= Stage
<dynamic-constructor> ::= Continuation
<dynamic-constructor> ::= Uniqueness
<dynamic-constructor> ::= ChildCoroutine
<dynamic-constructor> ::= PleaseGo
<dynamic-constructor> ::= PleaseDrop
<dynamic-constructor> ::= PleaseSplit
<dynamic-constructor> ::= ParentCoroutine
  -- The type ParentCoroutine{s} is shorthand for
  -- (PleaseGo{s} + (PleaseDrop{s} + PleaseSplit{s})).
<dynamic-constructor> ::= (_ -> _)
<dynamic-constructor> ::= (_ -> Atom{})
  -- Whenever this function is called, if the output is not an Atom{},
  -- a fatal error occurs in every stage and condition where that
  -- output value is observed.
<var> ::= (any identifier)

-- The following function signatures use an extended version of these
-- dynamic patterns to sketch out some inexact static types.
--
-- The (a ->? b) arrow is for operators that don't use the (a ->! b)
-- arrow, described next.
--
-- The (a ->! b) arrow means that the function is actually of the form
-- (a ->? (err + b)). The `err` case carries the actual input when the
-- input doesn't match the dynamic type pattern corresponding to `a`.
--
-- As a special case, a Placeholder{s} value can be matched not only
-- to explicit Placeholder patterns, but also to any non-Placeholder
-- pattern as long as `s` does not include the current stage.
-- Nevertheless, if the pattern specifies requirements on the stages,
-- `s` must meet those requirements.

-- TODO: Add more tools like these for introspection on types.
splitAtom ::
  ((s1 : Stage{Current}) * ((s2 : Stage{Current}) * Atom{s1, s2})) ->!
  (Atom{s1} * Atom{s2})
getTag :: a{s} ->? (a{s} * Atom{s})
  -- Note that this actually scours the dynamic type tag for (a{s}) to
  -- figure out what {s} is, even though it imposes no requirement on
  -- the dynamic type constructor itself.

l :: (a * (b * c)) ->! ((a * b) * c)
r :: ((a * b) * c) ->! (a * (b * c))
w :: (a * (b * c)) ->! (b * (a * c))
z :: (a * (b * (c * d))) ->! (a * (c * (b * d)))
v :: a ->? (a * Atom{})
c :: (a * Atom{}) ->! a
dropZero :: Zero ->! Atom{}
copyZero :: Zero ->! (Zero * Zero)
dropAtom :: Atom{s} ->! Atom{}
copyAtom :: Atom{s} ->! (Atom{s} * Atom{s})
dropStage :: Stage{s} ->! Atom{}
copyStage :: Stage{s} ->! (Stage{s} * Stage{s})
dropFn :: (A -> B){s} ->! Atom{}
copyFn :: (A -> B){s} ->! ((A -> B){s} * (A -> B){s})

apply :: ((A -> B){s} * (a{s} * c)) ->! (B * c)
compose :: ((A -> B){s} * (B -> C){s}) ->! (A -> C){s}
quoteFn :: (A -> B){s} ->! (Atom{} -> (A -> B){s}){s}

L :: (a + (b + c)) ->! ((a + b) + c)
R :: ((a + b) + c) ->! (a + (b + c))
W :: (a + (b + c)) ->! (b + (a + c))
Z :: (a + (b + (c + d))) ->! (a + (c + (b + d)))
V :: a ->? (a + Zero)
C :: (a + Zero) ->! a

applyOrDrop :: ((A -> B){s} * (a{s} + c)) ->! (B + c)
distribute :: (a * (b + d)) ->! ((a * b) + (a * d))
merge :: (a{s} + a{s}) ->! a{s}
  -- This type pattern behaves rather uniquely. It always matches if
  -- `s` includes the current stage, but it otherwise fails to match
  -- if the two branches don't have exactly the same dynamic type.
assert :: (a + b) ->? b
  -- Causes a fatal error with the error message `a` in every stage
  -- and condition where the message is observed.
  --
  -- If the input isn't of dynamic type (_ + _), this causes a fatal
  -- error in every stage where the input is observed.

-- In all of this group of signatures, the functions given as input
-- are guaranteed to be called exactly once.
makeCoroutine ::
  ( ((ParentCoroutine{s} * firstCoroutineInput{s}) -> Atom{}){s} *
    (finallyResult -> Atom{}){s}) ->!
  PleaseYield{s}
yieldRequestGo :: (ChildCoroutine{s} * coroutineInput{s}) ->!
  (ChildCoroutine{s} * result)
yieldAndGo ::
  (PleaseGo{s} * coroutineInput{s}) ->! (ParentCoroutine{s} * result)
yieldRequestDrop :: (ChildCoroutine{s} * coroutineInput{s}) ->! result
yieldAndDrop ::
  (PleaseDrop{s} * (coroutineInput{s} * finallyInput{s})) ->! Atom{}
yieldRequestSplit :: (ChildCoroutine{s} * coroutineInput{s}) ->!
  ((ChildCoroutine{s} * ChildCoroutine{s}) * result)
yieldAndSplit ::
  (PleaseSplit{s} *
    (coroutineInput{s} *
      ( ((ParentCoroutine{s} * branchInput1) -> Atom{}){s} *
        ( ((ParentCoroutine{s} * branchInput2) -> Atom{}){s} *
          ( (finallyResult1 * finallyResult2) ->
            mainFinallyResult){s})))
  ) ->! Atom{}

dropUniqueness :: Uniqueness{s} ->! Atom{}
splitUniqueness :: Uniqueness{s} ->! (Uniqueness{s} * Uniqueness{s})

-- TODO: Add more ways to get values of type Stage until they're
-- sufficient for the purposes of:
--
--   * Concurrency and distribution (RDP's partitions)
--   * Reactive programming (RDP's static delay)
--   * Consuming debugger hints
--   * And many more? (TODO)
--
startRecording ::
  (Uniqueness{s1} * (Atom{s1} * ((A -> B){s1} -> Atom{}){s1})) ->!
  (Uniqueness{s2} * (Continuation{s2} * Placeholder{s2}))
  -- where `s2` is a fresh descendant of stage `s1` on each call,
  -- thanks to the Uniqueness source
satisfyContinuation :: (Continuation{s} * a{s}) ->! Atom{}
