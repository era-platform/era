~~ Tenerezza design direction ~~

Every first-class value is a communication channel between people. It
can carry knowledge and extension modules back and forth. Aliasing a
channel simply means its incoming modules go to more than one place
and all those places' outgoing modules get collected.

Along every communication channel, both sides can continuously
negotiate the allocation of extra state meant to be distributed
somewhere along that channel. As long as it has been allocated, this
extra state has associated communication channels it communicates
over. (TODO: Design the technical details of this state allocation
feature.)

Every computation has access to several channels:

- A "conscience" channel to consult for error-handling. The person at
  the other end of this channel should be assumed to have full access
  to the computation's source code and even full extra-semantic
  control over the computation hardware, so asking them for advice is
  really only a courtesy. (TODO: Design the tech. We could almost say
  the continuation is the conscience channel, so it might be a matter
  of picking idioms.)

- A channel representing a snapshot state of the state resource in
  which the computation is running. Even a constant-time,
  constant-space computation has a small amount of space allocated
  somewhere and a small amount of time to manipulate it, so this idiom
  can accommodate computation platforms of various computational
  complexity tolerances. (TODO: Design the tech. Again, we could
  almost say the continuation is the state channel. This will probably
  be designed hand-in-hand with the state allocation feature.)

- Channels that represent this computation's ad hoc environment, its
  parameters, and/or its continuation.

Computations are mainly expected to take constant time and constant
space, expressing a nearly instantaneous reaction from incoming to
outgoing modules. Usually the computation will be executed over some
span of time so it can react to different inputs as time goes by. If a
computation needs to do more work than that, it should express that as
a request for stateful resources. However, because that use case is
commonly desired for convenience in programming, some language
syntaxes will be dedicated to generating and handling specific kinds
of requests. (NOTE: Right now those are (union ...) and (call ...),
which generate stack frames in the Tenerezza operation's result.)

The language will have a lot in common with Staccato, including its
constant-time-and-space-per-step semantics and its data/codata tuples.
However, the stack will be a tree carrying multiple active frames at
any given time, and the data/codata tuples will have cryptographic
restrictions on who can construct them and who can deconstruct them.

~~ Naming rationale ~~

"Tenerezza" is a term sometimes used in musical notation like
"Staccato," and it's Italian for "tenderness." This may suggest a lack
of hard technological obstacles getting in the way of person-to-person
communication, and it reflects the feeling I have bringing this to the
world.

~~ Tenerezza technical details ~~

A channel carries a set of incoming modules and a set of outgoing
modules. Even if it's a mix of data and codata, it's like a set: Any
kind of data or codata that isn't easy to express this way can be
approached as though the set is surrounded by universal and
existential quantifiers over producers and consumers. Under this
context, the data or codata is like an expression with free variables
from those quantifiers. Then we don't actually need the quantifiers
because we can use a verbose De Bruijn format for the variables, so
really we're only reliant on an extensible sum to use as identifiers
to describe those quanitifiers. In other words, as long as we have
sets and extensible sums, we can probably come up with ways to
represent anything else. (TODO: It might be nice to prove some theorem
about this. Figure out what that theorem would be.)

Rudimentary set functions, safe recursive set functions, and primitive
recursive set functions are outlined here:

http://www.cl.eps.manchester.ac.uk/medialand/maths/archived-events/workshops/www.mims.manchester.ac.uk/events/workshops/LC2012/slides/beckmann.pdf

We're aiming for a system simultaneously weaker and stronger than any
of those. General recursion is okay as long as we give a name to every
constant-time step, and in a single step we only want constant-time
computation.

A basic takeaway from those systems is that they use three special
operations:

- Pair: Join two sets into the two-element set containing them (or a
  one-element set, if they're equal).

- Diff: Take the difference of one set and another.

- Union: Loop over the elements of a set, produce a new set based on
  each element in a given way, and take the union of all the results.

Besides these basic set operations, we'll be dealing with
cryptographic restrictions on who can construct and deconstruct
information. This accomplishes that extensible sum we needed by
cryptographic force. These privilege tags will define various kinds of
containment relation. Our versions of these operations would look like
this:

- Pair: Given two containment relations we can construct and two
  channels, A and B, send the continuation channel a two-element (or
  one-element, if they're equal) set containing the incoming sets of A
  and B along the given relations, and ignore the set arriving from
  the continuation.

- Empty: Send the continuation channel an empty set, and ignore the
  set arriving from it.

- Diff: Given two channels, A and B, send the continuation channel the
  incoming set of A minus the incoming set of B, and ignore the set
  arriving from the continuation. (TODO: See if we'd rather forward
  the continuation's arrivals to A or something.)

- Union: Loop over the incoming set of a channel, produce a new
  channel based on each element in a given way, and send the
  continuation channel the union of the results. Forward the set
  arriving from the continuation to each of those result channels.

~~ Tenerezza differences from Staccato ~~

Much of Tenerezza's syntax is the same as Staccato's. Here's an
overview of the differences:

Close cousins:
Staccato's (match ...) and Tenerezza's (match-element ...)
Staccato's (tuple ...) and Tenerezza's (singleton ...)

Only in Tenerezza:
(minus ...)
(empty ...)
(union ...)
(swap-continuation ...)
(each ...)
(any-element ...)
(let-element-case ...)

Most of these differences are a bit idiosyncratic.

In order to give a name to the control flow block of (each ...),
Tenerezza syntactically distinguishes three steps for each
user-defined Tenerezza operation: <case-list> which can loop,
<element-case-list> which can branch, and <get-expr> which can do
everything else. Staccato only needed <case-list> to branch and
<get-expr> to do everything else. This difference is what gives
Tenerezza (any-element ...) and (let-element-case), and it's the
reason Tenerezza has (match-element ...) instead of (match ...).

The difference between Staccato's (tuple ...) and Tenerezza's
(singleton ...) is that anyone can check (singleton ...) values for
equality using (minus ...), whereas there's no plan to support an
equality check for (tuple ...).

The remaining, not-so-idiosyncratic difference is the addition of
certain operations to Tenerezza, making it possible to compute on
sets flowing in two directions:

(minus ...)
(empty ...)
(union ...)
(swap-continuation ...)
(each ...)


~~ Tenerezza syntax ~~

(TODO: Parts of this are just like Staccato syntax, so we don't
describe them. Update this so Staccato isn't required reading.)

<def> ::=
  // This defines the given tuple name to have the given function call
  // implementation.
  //
  // This requires permission to eliminate the tag.
  //
  (def <tuple-name> <opt-var-list>
    <case-list>)

<case-list> ::=
  (any <get-expr>)
  (let-case <var> <case-list>)

  // This trades the input channel for the current continuation. By
  // using this, we have the flexibility to get input and give output
  // along both the continuation and the input channel.
  //
  // NOTE: Without this, Tenerezza's flow of sets would only go one
  // way.
  //
  // NOTE: We can't just add
  // "<get-expr> ::= (swap-continuation <var> <get-expr> <get-expr>)"
  // because it can cause a paradoxical feedback loop in the span of a
  // single Tenerezza operation. Feedback loops are something we'll
  // accept in this language design, but we'll at least want to step
  // through them, so there has to be a Tenerezza operation boundary
  // somewhere in there. Here's a case where a single Tenerezza
  // operation could have caused a loop:
  //
  // (swap-continuation original
  //   \ We could do the same thing as we do on the other side, but we
  //   \ do something simpler. We just send the back-and-forth
  //   \ continuation back to itself. This also demonstrates that we
  //   \ don't need `original` to be in scope here to produce the
  //   \ paradox (though it would be trivial to surround this whole
  //   \ thing with two more (swap-continuation ...) forms to get
  //   \ `original` in scope).
  //   (swap-continuation back-and-forth (empty)
  //     (swap-continuation ignored back-and-forth
  //       back-and-forth))
  //   
  //   (swap-continuation back-and-forth original
  //     (union
  //       \ Send this back-and-forth to the original continuation.
  //       \ This makes it so we actually care what it contains.
  //       back-and-forth
  //       
  //       (swap-continuation original back-and-forth
  //         \ Send this back-and-forth everything it already has plus
  //         \ a wrapped-up version of itself. This goes infinite.
  //         (union back-and-forth
  //           (make foo /proj-cons foo back-and-forth /proj-nil))))))
  //
  (swap-continuation <case-list>)

  // This binds the given variable to a communication channel that
  // represents explicit communication with whatever is running the
  // code. That is, it communicates with whatever external system
  // doesn't actually need an explicit comunication channel to
  // interact. For instance, this would be used to interact with the
  // programmers themselves in a live coding session, because those
  // programmers could interact via modifying the code or using
  // invasive debugger tools anyway.
  //
  // By design, this interaction is always a mere courtesy. But it's a
  // good idiom for error handling: Look into your heart.
  //
  // From the point of view of the conscience itself, the conscience
  // receives connections like these from all over the program. There
  // is one connection per function call behavior definition. There
  // may be multiple instances of that behavior in progress at a given
  // time, but they all use the same connection.
  //
  // TODO: See if we should make it so there's one conscience
  // connection per active function call behavior. These all go to the
  // same place anyway; it's just a question of whether the conscience
  // will want to manipulate different substacks in different ways.
  //
  // NOTE: If we had a (conscience) <get-expr>, we would have the
  // additional conundrum of whether multiple occurrences of those in
  // a single Tenerezza operation should be independent connections,
  // and if so, how to differentiate them for the conscience to make
  // sense of the situation.
  //
  (let-conscience <var> <case-list>)

  (each <element-case-list>)

<element-case-list> ::=
  (any-element <get-expr>)
  (let-element-case <var> <element-case-list>)

  // This requires permission to eliminate the tag.
  //
  (match-element <tuple-name> <proj-pattern>
    <get-expr>
    <element-case-list>)

<get-expr> ::=
  (local <var>)
  (let <let-bindings-expr>
    <get-expr>)
  // Sugar.
  (let-def <def>
    <get-expr>)

  // NOTE: This sort of breaks through encapsulation by letting us
  // check elements for equality, but that quirk is rationalized by
  // making it explicit in the design intent of (singleton ...).
  //
  // NOTE: This is special in that it's the only operator here that
  // wouldn't make sense under the open world assumption (OWA).
  //
  (minus <get-expr> <get-expr>)

  (empty)

  (union <get-expr> <get-expr>)

  // Make a single-element set. The element is mostly encapsulated to
  // clients that don't have (match-element ...) permission for the
  // tag, but it does expose the ability to check it for equality with
  // other elements by way of (minus ...).
  //
  // This requires permission to introduce the tag.
  //
  (singleton <tuple-name> <proj-expr>)

  // Sugar.
  (save-root <save-root> <get-expr>)
  (save <save-root> <tuple-name>
    <proj-name> <tuple-name> <opt-var-list>
    <proj-name> <var>
    <get-expr>)
  (fn <tuple-name> <opt-var-list>
    <case-list>)

// A <tuple-name> is a global name, and it will always be accompanied
// by an <opt-proj-pattern>, <proj-pattern>, or <proj-expr> where the
// identifiers correspond to the channels that have been wrapped in a
// dynamic tag.
//
// Every <tuple-name> is associated with permission requirements that
// clients must meet to introduce or eliminate the tag. The actual
// content of the dynamic tag is the permission requirements, along
// with enough information about the unordered set of identifiers that
// we know which contained channels are which.
//
// The permission requirements are associated with a definition to
// invoke when the tag is used with (call ...). (However, we may allow
// programs to run when not all definitions are known.)
//
<tuple-name> ::= ...

<var> ::= ...  // Any identifier.
<save-root> ::= ...  // Any identifier.
<opt-proj-pattern> ::=
  (proj-pattern-omitted)
  (proj-pattern <proj-pattern>)
<proj-pattern> ::=
  (proj-pattern-cons <proj-name> <var> <proj-pattern>)
  (proj-pattern-nil)
<let-bindings-expr> ::=
  (let-bindings-cons <var> <get-expr> <let-bindings-expr>)
  (let-bindings-nil)
<proj-expr> ::=
  (proj-cons <proj-name> <get-expr> <proj-expr>)
  (proj-nil)

~~ Tenerezza Turing-complete computation ~~~

The core language semantics doesn't specify a particular way to do
Turing-complete computation, or even a particular way to call
functions. Nevertheless, implementations of Tenerezza are very likely
to provide a trampoline so those computations can be represented.
Computations using this trampoline should return one of two kinds of
value, and sets of more than one of these values will work too:

// Wrap the given cheaply computed value as a computation. (This is
// monadic return, not a nonlocal exit.)
(singleton return /proj-cons val _ /proj-nil)

// Call all elements of the `func`, using the `arg` as the argument
// and the current continuation as the continuation each time. (This
// means we end up taking the union of the results.)
(singleton call /proj-cons func _ /proj-cons arg _ /proj-nil)
