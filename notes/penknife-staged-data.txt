== Staged data-control flow using linear values in Penknife ==

First, some exploratory notation. When we represent multi-stage
data-control flow using first-class atoms, we need to be able to do
weakening, contraction, splitting, and merging of basic information.
So we need to annotate our types with whether they're observed in a
stage and in what circumstances they're observed:

Atom -> (Atom * Atom)

1 !obs -> (1 !obs * 1 !obs)
1 !obs -> 1
(x !obs * 1 !obs !if0 * 1 !obs !if1) -> (x !obs !if0 * x !obs !if1)
(x !obs !if0 * x !obs !if1) -> x !obs

There's a distinct relationship with display logic here. Our
implementation of this in Penknife will need no explicit operations to
commute and associate atoms across the (*) operation because this will
already be possible via Penknife variables, expressions, and data
structures. Display logic would be a good way to describe the logical
operations we get this way.

Now here's an almost complete data structure for atoms (or rather
their metadata, since an atom itself will act as a linear resource):

AtomMetadata ::= AtomMetadata Bool AtomType Stage Token Mask
-- AtomMetadata
--   polarity typeTag stage polymorphicRootBranchId casesCovered
AtomType ::= Unit
AtomType ::= LinearResource Token  -- linearResourceId
Stage ::= Stage Token  -- stageId
Mask ::= LeafMask Bool  -- isCovered
Mask ::= SubBranchMask Token Mask Mask
-- SubBranchMask subBranchId thenSubCasesCovered elseSubCasesCovered
-- NOTE: If a SubBranchMask carries two (LeafMask True) or two
-- (LeafMask False) values, it simplifies to a (LeafMask True) or
-- (LeafMask False) itself.

The motivation for the mask tree is to handle the associative law on
sums:

x
x + x  -- using a side effect or an x-specific operation
(x + x) + x  -- using a side effect or an x-specific operation
x + (x + x)
x + x
x

x {root}
x {root b1=1} + x {root b1=0}
(x {root b1=1 b2=1} + x {root b1=1 b2=0}) + x {root b1=0}
x {root b1=1 b2=1} + (x {root b1=1 b2=0} + x {root b1=0})
x {root b1=1 b2=1} + x {root (b1=1 b2=0, b1=0)}
x {root}

Since we represent atoms as first-class values in a lambda calculus,
we can't enforce mutual exclusion by the syntactic arrangement of +
connectives and explicit applications of the associative law. Instead
we encode this nested branching structure as a kind of
multidimensional 2x2x... truth table where dimensions have a
membership hierarchy corresponding to sum introductions. The mask
tree represents a local slice of this truth table.

When a program is recursive, its complete truth table may need to
accommodate a boundless number of branches. However, a function call's
computation (for instance) is oblivious to the history of branches
that were decided before it started; likewise, since an atom is more
like a static variable name than a value, we don't need every atom to
know its exact place in the complete truth table. Nevertheless, to
prohibit the merging of atoms that have different forgotten histories
(e.g. atoms that are part of different function calls), we need to
track at least enough enough information to know when two histories
are definitely the same. This is the `polymorphicRootBranchId`.

The notation (x {root (b1=1 b2=0, b1=0)}) is shorthand for this (for
some implicit value `stageToken`):

(AtomMetadata True x stageToken root
  (SubBranchMask b1
    (SubBranchMask b2 (LeafMask False) (LeafMask True))
    (LeafMask True)))

TODO:

This formulation of AtomMetadata currently has no way to describe
atoms that hold source code values, which will be important for staged
computation. These source code values will sometimes be polymorphic
over stage IDs or other complex parameters.

Here's a potential starting point, which might have some bugs:

AtomType ::= PolyAtom PolyAtom
PolyAtom ::= NoopPolyAtom [AtomMetadata]
PolyAtom ::= ForAllStages (Stage -> PolyAtom)
PolyAtom ::= ForAllRootBranchIds (Token -> PolyAtom)
PolyAtom ::= ForAllSubBranchIds (Token -> PolyAtom)
-- NOTE: The functions must behave like variable binding syntaxes.

-- TODO: See if there needs to be a strict relationship between the
-- stage and branch information of these contained AtomMetadata values
-- and the overall AtomMetadata they appear in.
