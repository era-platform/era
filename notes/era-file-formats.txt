era-file-formats.txt
Copyright 2013 Ross Angle. Released under the MIT License.

To store modules in a filesystem, Era will use a binary format that
happens to be restricted to the ASCII printable characters (0x20-0xFE)
and ASCII line breaks (\r and \n) and is human-readable as text, with
any instances of \r\n or \r being treated as though they're \n. This
file will be structured using a lisp-like syntax for nested lists of
strings, and its string syntax will be of the form \[...] with certain
backslashed escape sequences inside.

Once the file is parsed into lists and strings, it's parsed according
to a more semantics-oriented grammar, described below.


A very rough example:

(\[era-v1]
  (\[def-pubkey-everyone] \[k1])
  (\[def-literal] \[b1] \[abcd])
  (\[def-pubkey-derived] \[k2] \[b1] \[k1])
  (\[def-literal] \[b2] \[defg])
  (\[def-pubkey-derived] \[k3] \[b2] \[k1])
  (\[def-auth] \[s1] \[k2] \[a1])
  (\[parse] \[k3] (\[signed-meta]) (\[var] \[x]) (\[expr] \[x]))
  (\[def] \[a1] (\[k3] \[s1] \[y] \[y]))
  (\[export] \[a1]))


The grammar:

<bundle> ::= (era-v1 <bundle-decl>*)
<bundle-decl> ::= (parse <sym> <parse-arg>*)  // public key, parse-args
<bundle-decl> ::= (def <sym> <document>)
<bundle-decl> ::= (def-auth <sym> <sym> <sym>)  // variable, public key, document
<bundle-decl> ::= (sign <sym> <sym>)  // auth, private key
<bundle-decl> ::= (def-literal <sym> <sym>)  // variable, content
<bundle-decl> ::= (def-pubkey-everyone <sym>)  // variable
<bundle-decl> ::= (def-pubkey-derived <sym> <sym> <sym>)  // variable, literal, parent public key
<bundle-decl> ::= (export <sym>)  // document
<parse-arg> ::= (signed-meta)  // for self-references to signed one-export sub-bundles of this bundle
<parse-arg> ::= (var <sym>)
<parse-arg> ::= (expr <sym>*)
<document> ::= <sym>
<document> ::= (<sym> <document>*)


The signature process:

The plaintext that's actually signed is a one-export, no-signature
<bundle> derived and normalized from the contents of the original
<bundle>.

If the signature algorithm itself needs binary data, the normalized
s-expression can be rendered with spaces in between the list elements,
like (a (b c)). If the algorithm needs a string, it can use this
binary representation as though it were encoded ASCII text.

For def-pubkey-derived, the given signatures are verified against the
parent of this key.

For def-pubkey-everyone, no signature is needed.

TODO: Choose a nontrivial signature algorithm. Until we have one, we
don't actually need to do normalization at all.


Some miscellaneous notes about signatures and normalization:

- The normalization of a <bundle> can be verified in time and space
  near-linear in the size of the bundle.

- A fewer-export, fewer-signature <bundle> can be constructed in time
  and space near-linear in the size of the original bundle.

- Neither normalization nor fewer-export, fewer-signature <bundle>
  generation needs to refer to any user-defined Era modules except for
  the one bundle it's dealing with. (The same is almost true for
  signature verification, because for the short term, all the
  supported signature mechanisms will likely be built into the
  linker.)

- Normalization acts like JavaScript minification: It removes
  whitespace, removes some top-level dead code, and replaces all local
  variable names with rather short replacements. However, it isn't
  intended to do obfuscation or run time performance optimization, nor
  to choose the shortest variable names possible.


The normalization process:

First, some definitions: One declaration *depends* on another if it
uses a variable or `parse` rule the other defines. A *clump* is a
strongly connected component of the dependency graph of declarations.

First we remove all unused <bundle-decl> nodes, including exports and
signatures if those aren't wanted.

Then we identify all the independent clumps, split them off from the
rest, and sort them and deduplicate them amongst themselves. We must
preserve the declaration ordering within a clump! We repeat this
process with the remaining clumps until there are no declarations
remaining.

During the comparison process, variables are compared according to a
hypothetical mapping to integers. Any global variables defined in
already-sorted declarations come first (being mapped to the integer
that is their already-sorted location), followed by global variables
which are defined in the very clumps under consideration (being mapped
as though their respective clump will come first), followed by local
variables. Local variable bindings are numbered following the last
integer in their surrounding lexical environment, proceeding through
consecutive integers according to the location of their binding in
their binding syntactic form.

Once the order of all the declarations has been determined, each
variable is normalized to a stringified decimal number faithful to
that hypothetical mapping.

The local variables of the <act-expr> are renamed to start with "v"
(for "variable"), and each subexpression's variables are a consecutive
group beginning with the first variable not used by an ancestor
expression.
