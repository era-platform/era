== Tenerezza macros ==

(TODO: After letting these notes be forgotten for a while, I've started pursuing a macro system approach for Staccato in src/era-staccato-self-compiler.stc. The new approach has a couple of advantages over this one: Its top-level declarations can be concurrent (like Blade), and its concepts of gensym roots and environments are unified into a single hierarchical namespace concept. Its namespaces are inexpressive enough that it would be feasible for a metacircular interpreter to crawl a namespace and expose a first-class representation of it, for closed world assumption (CWA) purposes. Still, see if anything good that made it into this old approach was forgotten in the new approach.)

Tenerezza is a verbose language to use directly, so here we outline a design for a simple Lisp-like macro layer to bootstrap a more convenient language syntax. (Most of this would work for Staccato as well. Where it would not work, an alternative design is noted.)

Most kinds of value follow a method call convention: If a value is called with some kind of method value, it returns a maybe of some kind of method result value. The maybe is (nil) when the method is not supported.

To load a file (in a context that permits Turing-complete computation):
  - Start with a given environment and a given table which maps tuple challenges to compiled definitions.
  - In the following, "fully execute" or "fully invoke" means to execute or to invoke while following through with Turing-complete computation and consulting the table for function definitions. If any call has no definition, terminate with an error.
  - For each located s-expression in the file:
    - Do top-level macroexpansion of the located s-expression in the following way:
      - If the located s-expression is not a located (cons first rest), terminate with an error.
      - If its "first" located s-expression is not a located (string-nil string), terminate with an error.
      - Fully invoke the environment with method (get-macro macro-name) using the "string" as the "macro-name". If the method is not implemented, terminate with an error.
      - Fully invoke the resulting macro fork with method (fork-to-op usage) using overall located s-expression as the "usage". If the method is not implemented, terminate with an error.
      - Fully invoke the new resulting macro fork with method (fork-to-get). If the method is not implemented, terminate with an error.
    - Desugar and compile the resulting Tenerezza expression as Tenerezza code, sometimes doing the following things:
      - If the Tenerezza syntax is incorrect or has any free variables, terminate with an error.
      - If the Tenerezza syntax requires challenges that are not satisfiable, terminate with an error.
      - Whenever a tuple name is encountered, look it up by fully invoking the environment with method (tuple-name-to-challenges tuple-name). If the method is not implemented, terminate with an error.
    - If any Tenerezza definitions were encountered, look up the originals in the table. If any method has two distinct implementations (or in Staccato, two given implementations whether or not they're distinct), terminate with an error.
    - Add the compiled definitions to the table. The compiled definitions do not refer to tuple names, but they do not refer to specific tuple implementations either; they refer to the tuple challenges.
    - Fully execute the compiled Tenerezza expression.
    - Fully invoke the resulting Tenerezza value on the current environment.
    // TODO: See if we should support a monadic top-level command language here. For instance, a command could install some definitions and then execute another top-level command once those are visible.
    - Replace the environment with the Tenerezza value resulting from that invocation.
  - The result is the final environment and the final definition table.

An environment supports a method (get-macro macro-name) whose content is a single string. The method result is a maybe of a macro.

An environment supports a method (tuple-name-to-challenges tuple-name) whose content is a tuple name. The method result is a maybe of an encapsulated tuple challenge structure.

A macro supports a method (macro-invocation env gensym-root) whose "env" is an environment and whose "gensym-root" is a gensym root. The method result is a macro fork.

A gensym root supports a method (gensym-root-publish). The method result is a string beginning with "gs".

A gensym root supports a method (gensym-root-append string) whose content is a single string. The method result is a gensym root whose descendants will not collide with the original gensym root or its (gensym-root-append string) descendants with other "string" values.

A macro fork supports a method (fork-to-op usage) whose content is a located s-expression that is specifically a located (cons first rest). The method result is a macro fork.

A macro fork supports a method (fork-to-get). The method result is a Tenerezza expression.

A maybe of a given kind of value is a single element of either tag (nil) or tag (yep val) whose content is the given kind of value.

A list of a given kind of value is a single element of either tag (nil) or tag (cons first rest) whose "first" is the given kind of value and whose "rest" is a list of the given kind of value.

An interpolated string of a given kind of value is a single element of either tag (string-nil string) whose content is a single string or tag (string-cons string first rest) whose "string" is a single string, whose "first" is the given kind of value, and whose "rest" is an interpolated string of the given kind of value.

A location bundle of a given kind of value is a single element of tag (location-bundle maybe-location val) where "maybe-location" is a maybe of a location and "val" is the given kind of value.

A located s-expression is a location bundle of either a list of located s-expressions or an interpolated string of located s-expressions.

A Tenerezza expression is a located s-expression whose location-erased data conforms to the Tenerezza expression syntax.

The following kinds of value are left entirely abstract:
  - String
  - Tuple name
  - Encapsulated tuple challenge structure
  - Location

TODO: Define an initial environment. It should support at least a macro to drop to raw Tenerezza syntax, and it should have corresponding challenges for all the tuple names used in this spec:

  - (nil)
  - (cons first rest)
  - (string-nil string)
  - (string-cons string first rest)
  - (yep val)
  - (location-bundle maybe-location val)
  - (get-macro macro-name)
  - (fork-to-op usage)
  - (fork-to-get)
  - (tuple-name-to-challenges tuple-name)
  - (macro-invocation env gensym-root)
  - (gensym-root-publish)
  - (gensym-root-append string)
  // TODO: Change Tenerezza's design so that these result stacks become baked into our meaning of "fully execute/invoke":
  - (empty)
  - (union a b)  // where a and b are result stacks
  - (call func arg)  // where arg is a result stack
  - (return-value val)

TODO: Add function definitions to manipulate tuple names and encapsulated tuple challenge structures so that we can use tuple names beyond what was already supported by the original environment's (tuple-name-to-challenges tuple-name) method.
