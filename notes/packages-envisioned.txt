== Package categories envisioned for the Era module system ==

Below is a hierarchical index to suggest what kinds of packages might
be available in the Era ecosystem.

The semantic modules themselves will not be locked into particular
categories, but nevertheless it will help to have at least one website
(or other listing) so that people can get a picture of what modules
already exist and discuss what modules they need.


Concept sharing and combination
  - ("modularity" except that term is too fuzzy)
  - knowledge representation
  - extension and customization
    - terms of use
  - Expression Problem solutions
  - constraint solvers and optimizers
  - mathematical foundations

Storage
  - databases
    - Era module databases
  - data warehousing

Intuition
  - error handling
  - brainstorming
  - summarizing
  - example-based specification
  - anonymization
  - deanonymization

Discrete-space multitasking and networking
  - subprocess memory/computation/randomness limiting/monitoring
  - bootstrapping into own memory/computation/randomness
    limiters/monitors
  - latency limiting/monitoring
  - execution strategy directives
  - exotic computation hardware support
  - quantum key distribution
  - latency limiting/monitoring

(TODO: This one's worded more like a wish list than a category. Reword
it and/or factor it out into its own design doc.)
Discrete-space interface negotiation
  - hints to collapse a set of options into progressive disclosure and
    then to organize the options intuitively
  - input fields or protocols that instantiate themselves for
    particular kinds of options
  - ways to let the user escape to a meta-interface that renegotiates
    the progressive disclosure hints, input fields, and protocols
  - programmatic subprocess interface negotiation

Discrete-space agent relationships
  - replicated delegate agents
  - triage of instantiated agents
  - negotiation of an ethical arbiter
  - officiated changes in agents' relationships and property ownership
  - ownership certificates of cryptographic keys
  - various definitions of external legal concepts

Continuous-space navigation and display
  - realistic physics simulation
  - photorealistic raster image manipulation
  - sensors and actuators for spatial interaction
    - screen display and touch screen input
    - keyboards
    - mice
    - cameras
    - microphones
    - speakers
    - echolocation
    - radio equipment
    - propellers
    - legs
    - etc.
  - physical manipulation and manufacture of computational hardware

Cryptography
  - hashing
  - encrypting/decrypting
  - non-repudiable signatures
  - message authentication codes
  - commitment schemes
  - cryptography circumvention

Manually optimized algorithms and data structures
  - exact arithmetic
  - floating-point numbers
  - matrices
  - graph algorithms

Natural or notational linguistic artifacts
  - natural language text processing
  - program code processing
  - typesetting
  - chart and diagram plotting
  - speech recognition
  - speech synthesis

Decoration and style
  - theme creation
  - font creation
  - icon symbol packs
  - non-photorealistic rendering
  - theatrical timing
  - example icon sets
  - example fonts
  - example themes
  - example knick-knacks

Storytelling
  - drama management
  - endearingness
    - conveying alternate points of view

Novelty spotlight
  - esoteric tools
  - non-realistic simulations
  - example video games
  - example videos
  - example fiction
  - example visual art
  - example poetry
  - example dance


This might omit several categories you'd otherwise expect to see. I'm
avoiding potential categories like "programming languages" or "data
structures" or "machine learning" because while they may be specific
about the *techniques* involved, they're vague about why someone would
decide to explore them.

What do you expect to find in a category called "programming
languages"? I'd expect to get things that help me program (but all
these categories will help me do that!) and things that require me to
have some skills in the domain of manipulating formal notation. So
this category would really be defined by a prerequisite, not a goal.

In catalogs full of data structures, most seem to be valuable because
of efficiency, and some are valuable because they correspond to the
shape of a diagram or resemble other domain-specific understandings of
data. These are better off organized by domain, with the topic of
efficiency expanded to explicitly cover both the efficient data
structures and their efficient algorithms.

Machine learning can probably be understood in many ways, but if we
take away the widely applicable topics of sensors, knowledge
representation, and databases, what remains is the topic of
synthesizing intuitive behavior without a precise specification.

These were just a few examples, meant to openly demonstrate how these
categories have been chosen.

I openly expect some of my choices here will be biased based on how I
see the world. (TODO: See if there's a particularly good example to
highlight.)
